/*
LEFT TO DO:
- do i use uuid or mongoDB to generate ID???
- not returning an object?




In books.js, you will create and export 5 methods. 
Create, Read (getting all and also getting by id), Update, and Delete. 



You must do FULL error handling and input checking for ALL functions 
as you have in previous labs, checking if input is supplied, correct 
type, range etc. and throwing errors when you encounter bad input.
*/



const mongoCollections = require('../config/mongoCollections');
const books = mongoCollections.books;
//const reviews = require('./reviews');                    /// UNSURE IF NECESSARY IN THIS FILE
//const reviewsCollection = mongoCollections.reviews;      /// UNSURE IF NECESSARY IN THIS FILE
const uuid = require('uuid');   /// needed to generate ID ------NEED TO SWITCH TO MONGODB GENERATING

let exportedMethods = {
  
  // METHOD 1: read by getting all
    async getAllBooks() {
    const bookCollection = await books();
    const bookList = await bookCollection.find({}).toArray();
    return bookList;
  },


// METHOD 2: read by getting by id
  // This is a fun new syntax that was brought forth in ES6, where we can define
  // methods on an object with this shorthand!  
  async getBookById(id) {
    const bookCollection = await books();
    const book = await bookCollection.findOne({ _id: id });
    if (!book) throw 'Book not found';
    return book;
/// LOOK INTO NOT RETURNNG AN OBJECT!!!!!!!!!!!!!!!!!!!
  },




// METHOD 3: create
  async addBook(title, author, genre, datePublished, summary, reviews) {
    const bookCollection = await books();
    // title
    if (!title) throw 'You must provide a title for the Book!';
    // author
    if (!author) throw 'You must provide an author of the Book!';
    // genre
    if (!genre || !Array.isArray(genre)) throw 'You must provide an array of genre!';
    if (genre.length === 0) throw 'You must provide at least one genre'; 
    // datePublished
    if (!datePublished) throw 'You must provide the date the book was published!';
    // summary
    if (!summary) throw 'You must provide a summary of the Book!';
    // reviews
    if (!Array.isArray(reviews)) reviews = [];
    let newBook = {
        _id: uuid.v4(),          // ObjectId generated by MongoDB,
        title: title,
        author: author, //{authorFirstName: "first name", authorLastName: "last name"},
        genre: genre, // ["genre1", "genre2"], //array of genres, there must be at least one genre
        datePublished: datePublished, //Date field,
        summary: summary,
        reviews: reviews, // [{},{},{}] //array of review objects for this book 
    };
    const newInsertInformation = await bookCollection.insertOne(newBook);
    if (newInsertInformation.insertedCount === 0) throw 'Insert failed!';
    return await this.getBookById(String(insertInfo.insertedId));//this.getBookById(newInsertInformation.insertedId);
        /* THIS COULD BE SOLUTION TO RETURNING A STRING AND NOT AN OBJECT
            const newId = insertInfo.insertedId;
            const newIDString = String(newId);
            const book = await this.getBook(newIDString);
            return book;
        */
},


// METHOD 4: delete
  async removeBook(id) {
    const bookCollection = await books();
    const deletionInfo = await bookCollection.deleteOne({ _id: id });
    if (deletionInfo.deletedCount === 0) {
      throw `Could not delete book with id of ${id}`;
    }
    return true;
  },



// METHOD 5: update
  async updateBook(id, title, author, genre, datePublished, summary, reviews) {
    const book = await this.getBookById(id);
    console.log(book);

    const bookUpdateInfo = {
       // _id: uuid.v4()          // ObjectId generated by MongoDB,
        title: title,
        author: author, //{authorFirstName: "first name", authorLastName: "last name"},
        genre: genre, // ["genre1", "genre2"], //array of genres, there must be at least one genre
        datePublished: datePublished, //Date field,
        summary: summary,
        reviews: reviews,
    };

    const bookCollection = await books();
    const updateInfo = await bookCollection.updateOne(
      { _id: id },
      { $set: userUpdateInfo }
    );
    if (!updateInfo.matchedCount && !updateInfo.modifiedCount)
      throw 'Update failed';

    return await this.getBookById(id);
  }
};

module.exports = exportedMethods;